Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
std_dir
apply(std_dir, c(1,2), mean)
alpha <- c(1,1,1,1,1)
nrep <- 1e4
R_dir <- Rcpp_dir <- boost_dir <- arma_dir <- arma_mcdir <- std_dir <- array(NA, c(4, alpha_size, nrep))
for (i in 1:nrep){
R_dir[,,i] <- rdir(n, alpha)
Rcpp_dir[,,i] <- rdirichlet(n, alpha)
boost_dir[,,i] <- rd_boost(n, alpha)
arma_dir[,,i] <- rd_arma(n, alpha)
arma_mcdir[,,i] <- rd_armaMC(n, alpha, 4)
std_dir[,,i] <- rd_std(n, alpha)
}
chk_draws(R_dir, alpha)
apply(std_dir, c(1,2), mean)
apply(Rcpp_dir, c(1,2), mean)
chk_draws(Rcpp_dir, alpha)
rdirichlet(n = 100, alpha)
bla <- rdirichlet(n = 100, alpha)
apply(bla, 2, mean)
bla <- rdirichlet(n = 100, c(10, 10, 10, 10, 10))
apply(bla, 2, mean)
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
install.packages("microbenchmark")
chk_draws(std_dir, alpha)
apply(std_dir, c(1,2), mean)
std_dir
rd_std(10, alpha)
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
Rcpp::sourceCpp('Documents/side_projects/random_numbers/rdirich.cpp')
install.packages("bookdown")
# load package
install.packages("devtools")
# installation from github by devtools: please ensure mentioned packages
#are up-to-date
devtools::install_github("NeferkareII/bite")
require(bite)
# use internal dataset exampledata from bite
data(exampledata)
baseline <- as.data.frame(exampledata$base.mat)
panelmatrix <- as.data.frame(exampledata$panel.mat)
head(baseline)
head(panelmatrix)
# It's necessary to name the columns correctly at the moment
# There will be the option to give a vector of indices
names(panelmatrix) <- c("ID", "panelT", "y", "V1", "V2", "t2", "t3",
"t4")
names(baseline) <- c("ID", "Ti", "trt", "V1", "V2", "V3")
cont_opts <- list(fix.alpha=FALSE, fix.beta=FALSE, fix.sigma=FALSE,
sort.data=TRUE, fix.f=FALSE)
bayestrt_object <- bayesTrtEffects(base.mat = baseline, panel.mat =
panelmatrix,
control = cont_opts, type = "SRT")
bayestrt_object <- bayesTrtEffects(base.mat = baseline, panel.mat =
panelmatrix,
control = cont_opts, type = "SRF")
bayestrt_object <- bayesTrtEffects(base.mat = baseline, panel.mat =
panelmatrix,
control = cont_opts, type = "SRI")
bayestrt_object <- bayesTrtEffects(base.mat = baseline, panel.mat =
panelmatrix,
control = cont_opts, type = "SF")
View(bayestrt_object)
plot(density(bayestrt_object$effect$ate))
bayestrt_object[["effect"]][["ate"]]
bayestrt_object[["mcmc"]][["mcmc"]][["burnin"]]
plot(bayestrt_object$mcmc$alpha)
plot(bayestrt_object$mcmc$alpha[1,])
plot(bayestrt_object$mcmc$alpha[,1])
plot(bayestrt_object$mcmc$alpha[,1], type = 'l')
install.packages("urca")
install.packages("TSA")
??auto.arima
install.packages("forecast")
forecast::auto.arima(bayestrt_object$mcmc$alpha[1000:2000,1])
install.packages("pwr")
library(pwr)
pwr.t.test(d=0.6,)
pwr.t.test(d=0.6, sig.level = 0.05)
pwr.t.test(d=0.6, sig.level = 0.05, power = 0.8)
pwr.t.test
install.packages("truncnorm")
library(truncnorm)
?rtruncnorm
shiny::runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
?sprintf
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
?h3
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
?rnowm
?rnorm
runApp('Documents/Teaching/R/CLT')
?diff
diff(-4,3)
diff(c(-4,3))
diff(c(-4,3))^2
diff(c(3,-4))^2
diff(c(3,4))^2
diff(c(4,3))^2
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
plot(function(x) dnorm(x))
runApp('Documents/Teaching/R/CLT')
?dnorm
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
mu <- 0
sd <- 1
plt <- ggplot() +stat_function(data = data.frame(x=0),
fun = dnorm,
args = list(mean = mu,
sd = sd),
lwd = 4,
color = 'red')
plt
plt <- ggplot() +stat_function(data = data.frame(x=seq(mu-5, mu+5)),
fun = dnorm,
args = list(mean = mu,
sd = sd),
lwd = 4,
color = 'red')
plt
runApp('Documents/Teaching/R/CLT')
plt <- ggplot()+
stat_function(fun = function(y){dnorm(y, mean = mu, sd = se_mean)}, geom = "line", color = "red")
plt
plt <- ggplot(data.frame(x=0))+
stat_function(fun = function(y){dnorm(y, mean = mu, sd = se_mean)}, geom = "line", color = "red")
plt
plt <- ggplot(data.frame(x=c(0.,0,0)))+
stat_function(fun = function(y){dnorm(y, mean = mu, sd = se_mean)}, geom = "line", color = "red")
plt
plt <- ggplot(data.frame(x=c(0.,0,0)))+
stat_function(fun = function(y){dnorm(y, mean = mu, sd =sd)}, geom = "line", color = "red")
plt
plt <- ggplot(data.frame(x=c(0.,0,0)))+
stat_function(fun = dnorm, args = list(mu, sd), geom = "line", color = "red")
plt
plt <- ggplot(data.frame(x=c(0.,0,0)))+
stat_function(fun = dnorm, args = list(mu, sd), geom = "line", color = "red", inherit.aes = FALSE)
plt
set.seed(1492)
df <- data.frame(
x = rnorm(100)
)
x <- df$x
base <- ggplot(df, aes(x)) + geom_density()
base + stat_function(fun = dnorm, colour = "red")
base + stat_function(fun = dnorm, args = list(0, 1), colour = "red")
base + stat_function(fun = dnorm, args = list(0, 10), colour = "red")
base <- ggplot(df, aes(x)) + geom_histogram(aes(y=..density..))
base + stat_function(fun = dnorm, args = list(0, 10), colour = "red")
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
95/100
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
base <- ggplot(df, aes(x)) + geom_histogram(aes(y=..density..))
base + stat_function(fun = dnorm, args = list(0, 10), colour = "red") +
stat_function(fun = dnorm, args = list(0, 10), geom = 'area', colour = "red")
base + stat_function(fun = dnorm, args = list(0, 10), colour = "red") +
stat_function(fun = dnorm, args = list(0, 10), geom = 'area', colour = "green")
runApp('Documents/Teaching/R/CLT')
runApp('Documents/Teaching/R/CLT')
